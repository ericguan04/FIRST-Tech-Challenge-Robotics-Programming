package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp; 
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

@TeleOp(name="Freight_Frenzy_Official_TeleOp")
public class Freight_Frenzy_Official_TeleOp extends OpMode { //for toggling
    //boolean onOff = true;

    //arm encoder calculations
    static final double COUNTS_PER_MOTOR_REV = 751.8;    // goBilda 5203 223rpm ticks per revolution
    static final double DRIVE_GEAR_REDUCTION = 1.0;      // This is < 1.0 if geared UP
    static final double PULLY_HUB_DIAMETER_INCHES = 1.375;  // For figuring circumference
    static final double COUNTS_PER_INCH = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (PULLY_HUB_DIAMETER_INCHES * 3.1415);
    static final double ARM_SPEED = 0.9;
    static final double FIRST_LEVEL_INCHES = 4.2096;
    static final double SECOND_LEVEL_INCHES = 9.2341;
    static final double THIRD_LEVEL_INCHES = 15.2090;

    public enum LiftState {
        LIFT_START,
        LIFT_DUMP,
        LIFT_DUMP_RETRACT,
        LIFT_RETRACT,
        LIFT_EXTEND_ONE,
        LIFT_EXTEND_TWO,
        LIFT_EXTEND_THREE,
        LIFT_DUMP_TIMER,
        LIFT_DUMP_RETRACT_TIMER
    }

    LiftState liftState = LiftState.LIFT_START;

    public enum IntakeState {
        INTAKE_START,
        INTAKE_ON,
        INTAKE_RESET,
        INTAKE_PAUSE1,
        INTAKE_PAUSE2
    }

    IntakeState intakeState = IntakeState.INTAKE_START;

    public enum DriveState {
        DRIVE_FAST,
        DRIVE_SLOW
    }

    DriveState driveState = DriveState.DRIVE_FAST;

    //arm motor
    public DcMotor armMotor;

    //intake motor
    public DcMotor intake;

    //mecanum wheels
    public DcMotor frontLeft;
    public DcMotor backLeft;
    public DcMotor frontRight;
    public DcMotor backRight;

    //cam servo
    public Servo cam;

    final double CAM_IDLE = 0.0;
    final double CAM_ON = 0.35;
    ElapsedTime intakeTimer = new ElapsedTime();
    final double INTAKE_TIME = 1;
    ElapsedTime intakePauser = new ElapsedTime();
    final double INTAKE_PAUSE_TIME = 0.300;

    //dump servo
    public Servo Bucket;
    ElapsedTime dumpTimer = new ElapsedTime();
    ElapsedTime dumpResetTimer = new ElapsedTime();
    final double DUMP_TIME = 0.6;
    final double DUMP_RETRACT_TIME = 0.325;

    final double DUMP_IDLE = 0.605;
    final double DUMP_DEPOSIT = 0.0;
    final int LIFT_LEVEL_ZERO = 15;
    final int LIFT_LEVEL_ONE = (int) (FIRST_LEVEL_INCHES * COUNTS_PER_INCH);
    final int LIFT_LEVEL_TWO = (int) (SECOND_LEVEL_INCHES * COUNTS_PER_INCH);
    final int LIFT_LEVEL_THREE = (int) (THIRD_LEVEL_INCHES * COUNTS_PER_INCH);

    public void init() {
        frontLeft = hardwareMap.dcMotor.get("frontLeft");
        backLeft = hardwareMap.dcMotor.get("backLeft");
        frontRight = hardwareMap.dcMotor.get("frontRight");
        backRight = hardwareMap.dcMotor.get("backRight");
        armMotor = hardwareMap.dcMotor.get("armMotor");
        Bucket = hardwareMap.servo.get("Bucket");
        intake = hardwareMap.dcMotor.get("intake");
        cam = hardwareMap.servo.get("cam");

        frontRight.setDirection(DcMotorSimple.Direction.REVERSE);
        backRight.setDirection(DcMotorSimple.Direction.REVERSE);
        armMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        cam.setDirection(Servo.Direction.REVERSE);
        intake.setDirection(DcMotorSimple.Direction.REVERSE);

        armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        armMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        //added this to set up servos during init
        Bucket.setPosition(DUMP_IDLE);
        cam.setPosition(CAM_IDLE);

        //testing: adding brake behavior to tele-op drive train
        frontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        //reset the times
        intakeTimer.reset();
        intakePauser.reset();
        dumpTimer.reset();
        dumpResetTimer.reset();
    }

    public void loop() {
        //code for the intake

        }
        //safety button to reset the states
        if (gamepad1.x && liftState != LiftState.LIFT_START) {
            intake.setPower(0.0);
            cam.setPosition(CAM_IDLE);
            intakeState = IntakeState.INTAKE_START;
        }

        //code for the arm
        switch (liftState) {
            case LIFT_START:
                if (gamepad2.a) {
                    armMotor.setTargetPosition(LIFT_LEVEL_ONE);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_ONE;
                }

                if (gamepad2.b) {
                    armMotor.setTargetPosition(LIFT_LEVEL_TWO);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_TWO;
                }

                if (gamepad2.y) {
                    armMotor.setTargetPosition(LIFT_LEVEL_THREE);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_THREE;
                }
                break;
            case LIFT_EXTEND_ONE:
                if (Math.abs(armMotor.getCurrentPosition() - LIFT_LEVEL_ONE) < 10) {
                    armMotor.setPower(0);
                    liftState = LiftState.LIFT_DUMP;
                }
                break;
            case LIFT_EXTEND_TWO:
                if (Math.abs(armMotor.getCurrentPosition() - LIFT_LEVEL_TWO) < 10) {
                    armMotor.setPower(0);
                    liftState = LiftState.LIFT_DUMP;
                }
                break;
            case LIFT_EXTEND_THREE:
                if (Math.abs(armMotor.getCurrentPosition() - LIFT_LEVEL_THREE) < 10) {
                    armMotor.setPower(0);
                    liftState = LiftState.LIFT_DUMP;
                }
                break;
            case LIFT_DUMP:
                if (gamepad1.y) {
                    Bucket.setPosition(DUMP_DEPOSIT);
                    dumpTimer.reset();
                    liftState = LiftState.LIFT_DUMP_TIMER;
                }

                if (gamepad2.a) {
                    armMotor.setTargetPosition(LIFT_LEVEL_ONE);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_ONE;
                }

                if (gamepad2.b) {
                    armMotor.setTargetPosition(LIFT_LEVEL_TWO);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_TWO;
                }

                if (gamepad2.y) {
                    armMotor.setTargetPosition(LIFT_LEVEL_THREE);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_THREE;
                }
                break;
            case LIFT_DUMP_TIMER:
                if (dumpTimer.seconds() >= DUMP_TIME) {
                    liftState = LiftState.LIFT_DUMP_RETRACT;
                }
                break;
            case LIFT_DUMP_RETRACT:
                Bucket.setPosition(DUMP_IDLE);
                dumpResetTimer.reset();
                liftState = LiftState.LIFT_DUMP_RETRACT_TIMER;
                break;
            case LIFT_DUMP_RETRACT_TIMER:
                if (dumpResetTimer.seconds() >= DUMP_RETRACT_TIME) {
                    armMotor.setTargetPosition(LIFT_LEVEL_ZERO);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_RETRACT;
                }
                break;
            case LIFT_RETRACT:
                if (Math.abs(armMotor.getCurrentPosition() - LIFT_LEVEL_ZERO) < 10) {
                    armMotor.setPower(0);
                    liftState = LiftState.LIFT_START;
                }
                break;
            default:
                liftState = LiftState.LIFT_START;
        }
        //safety button to reset the states
        if (gamepad2.x && liftState != LiftState.LIFT_START) {
            Bucket.setPosition(DUMP_IDLE);
            dumpResetTimer.reset();
            liftState = LiftState.LIFT_DUMP_RETRACT_TIMER;
        }

        //code for the slow and fast mode drivetrain
        switch (driveState)

    {
        case DRIVE_FAST:
            //code for the mecanum wheels
            double y = -gamepad1.left_stick_y; // Remember, this is reversed!
            double x = gamepad1.left_stick_x * 1.1; // Counteract imperfect strafing
            double rx = gamepad1.right_stick_x;

            // Denominator is the largest motor power (absolute value) or 1
            // This ensures all the powers maintain the same ratio, but only when
            // at least one is out of the range [-1, 1]
            double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            double frontLeftPower = (y + x + rx) / denominator;
            double backLeftPower = (y - x + rx) / denominator;
            double frontRightPower = (y - x - rx) / denominator;
            double backRightPower = (y + x - rx) / denominator;

            //divide by value greater than 1 to make it slower
            frontLeft.setPower(-frontLeftPower);
            backLeft.setPower(-backLeftPower);
            frontRight.setPower(-frontRightPower);
            backRight.setPower(-backRightPower);

            if (gamepad1.left_bumper) {
                driveState = DriveState.DRIVE_SLOW;
            }
            break;
        case DRIVE_SLOW:
            //code for the mecanum wheels
            y = -gamepad1.left_stick_y; // Remember, this is reversed!
            x = gamepad1.left_stick_x * 1.1; // Counteract imperfect strafing
            rx = gamepad1.right_stick_x;

            // Denominator is the largest motor power (absolute value) or 1
            // This ensures all the powers maintain the same ratio, but only when
            // at least one is out of the range [-1, 1]
            denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            frontLeftPower = (y + x + rx) / denominator;
            backLeftPower = (y - x + rx) / denominator;
            frontRightPower = (y - x - rx) / denominator;
            backRightPower = (y + x - rx) / denominator;

            //divide by value greater than 1 to make it slower
            frontLeft.setPower(-frontLeftPower / 2.5);
            backLeft.setPower(-backLeftPower / 2.5);
            frontRight.setPower(-frontRightPower / 2.5);
            backRight.setPower(-backRightPower / 2.5);

            if (gamepad1.right_bumper) {
                driveState = DriveState.DRIVE_FAST;
            }
            break;
        default:
            driveState = DriveState.DRIVE_FAST;
    }
    
    }
}

        //code to toggle the intake using the A button
        //uses the boolean "onOff" to remember if the button has been pressed before or not. The sleep command allows the code to temporarily stop in order to allow the onOff variable to switch. It gives us a 0.2 second window to press the button.
        //this code allows the variable to switch when the button is pressed.

        /*if (gamepad1.a && !onOff)
        {
            onOff = true;
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) { }
        }
        else if (gamepad1.a && onOff)
        {
            onOff = false;
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) { }
        }

        if(onOff)
        {
            intake.setPower(-1);
        }
        else if(!onOff)
        {
            intake.setPower(0.0);
        }

        if(gamepad1.b)
        {
            intake.setPower(1);
        }
        else
        {
            intake.setPower(0.0);
        }



        //carousel code
        //hold the bumpers to run the carousel code in either direction
       if(gamepad2.left_bumper)
        {
            Carousel.setPower(0.7);
        }
        else
        {
            Carousel.setPower(0);
        }

        if(gamepad2.right_bumper)
        {
            Carousel.setPower(-0.7);
        }
        else
        {
            Carousel.setPower(0);
        }
         */
