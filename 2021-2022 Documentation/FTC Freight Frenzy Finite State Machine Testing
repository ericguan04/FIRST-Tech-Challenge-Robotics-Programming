package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;

@TeleOp(name="State_Machine")

public class StateMachine_Testing extends OpMode
{
    //ARM ENCODER CALCULATIONS
    static final double     COUNTS_PER_MOTOR_REV        = 751.8 ;    // goBilda 5203 223rpm ticks per revolution
    static final double     DRIVE_GEAR_REDUCTION        = 1.0 ;      // This is < 1.0 if geared UP
    static final double     PULLY_HUB_DIAMETER_INCHES   = 1.375 ;    // For figuring circumference
    static final double     COUNTS_PER_INCH             = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (PULLY_HUB_DIAMETER_INCHES * 3.1415);
    static final double     ARM_SPEED                   = 0.9;
    static final double     FIRST_LEVEL_INCHES          = 4.2500;
    static final double     SECOND_LEVEL_INCHES         = 9.2341;
    static final double     THIRD_LEVEL_INCHES          = 15.2090;

    public enum LiftState
    {
        LIFT_START,
        LIFT_DUMP,
        LIFT_DUMP_RETRACT,
        LIFT_RETRACT,
        LIFT_EXTEND_ONE,
        LIFT_EXTEND_TWO,
        LIFT_EXTEND_THREE
    }

    LiftState liftState = LiftState.LIFT_START;

    //arm motor
    public DcMotor armMotor;

    //mecanum wheels
    public DcMotor frontLeft;
    public DcMotor backLeft;
    public DcMotor frontRight;
    public DcMotor backRight;

    //dump servo
    public Servo Bucket;
    ElapsedTime liftTimer = new ElapsedTime();

    final double DUMP_IDLE = 0.605;
    final double DUMP_DEPOSIT = 0.0;
    final int LIFT_LEVEL_ZERO = 15;
    final int LIFT_LEVEL_ONE = (int) (FIRST_LEVEL_INCHES * COUNTS_PER_INCH);
    final int LIFT_LEVEL_TWO = (int) (SECOND_LEVEL_INCHES * COUNTS_PER_INCH);
    final int LIFT_LEVEL_THREE = (int) (THIRD_LEVEL_INCHES * COUNTS_PER_INCH);

    public void init()
    {
        frontLeft = hardwareMap.dcMotor.get("frontLeft");
        backLeft = hardwareMap.dcMotor.get("backLeft");
        frontRight = hardwareMap.dcMotor.get("frontRight");
        backRight = hardwareMap.dcMotor.get("backRight");
        armMotor = hardwareMap.dcMotor.get("armMotor");
        Bucket = hardwareMap.servo.get("Bucket");

        frontRight.setDirection(DcMotorSimple.Direction.REVERSE);
        backRight.setDirection(DcMotorSimple.Direction.REVERSE);
        armMotor.setDirection(DcMotorSimple.Direction.REVERSE);

        armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        armMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        //added this to set up servo during init
        Bucket.setPosition(DUMP_IDLE);

        //testing: adding brake behavior to tele-op drive train
        frontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    }

    public void loop()
    {
        switch (liftState)
        {
            case LIFT_START:
                if(gamepad2.a)
                {
                    armMotor.setTargetPosition(LIFT_LEVEL_ONE);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_ONE;
                }

                if(gamepad2.b)
                {
                    armMotor.setTargetPosition(LIFT_LEVEL_TWO);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_TWO;
                }

                if(gamepad2.y)
                {
                    armMotor.setTargetPosition(LIFT_LEVEL_THREE);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_THREE;
                }
                break;
            case LIFT_EXTEND_ONE:
                if(Math.abs(armMotor.getCurrentPosition() - LIFT_LEVEL_ONE) < 10)
                {
                    armMotor.setPower(0);
                    liftState = LiftState.LIFT_DUMP;
                }
                break;
            case LIFT_EXTEND_TWO:
                if(Math.abs(armMotor.getCurrentPosition() - LIFT_LEVEL_TWO) < 10)
                {
                    armMotor.setPower(0);
                    liftState = LiftState.LIFT_DUMP;
                }
                break;
            case LIFT_EXTEND_THREE:
                if(Math.abs(armMotor.getCurrentPosition() - LIFT_LEVEL_THREE) < 10)
                {
                    armMotor.setPower(0);
                    liftState = LiftState.LIFT_DUMP;
                }
                break;
            case LIFT_DUMP:
                if(gamepad1.y)
                {
                    Bucket.setPosition(DUMP_DEPOSIT);
                    try {
                        Thread.sleep(600);
                    } catch (InterruptedException e) { }
                    liftState = LiftState.LIFT_DUMP_RETRACT;
                }

                if(gamepad2.a)
                {
                    armMotor.setTargetPosition(LIFT_LEVEL_ONE);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_ONE;
                }

                if(gamepad2.b)
                {
                    armMotor.setTargetPosition(LIFT_LEVEL_TWO);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_TWO;
                }

                if(gamepad2.y)
                {
                    armMotor.setTargetPosition(LIFT_LEVEL_THREE);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_THREE;
                }
                break;
            case LIFT_DUMP_RETRACT:
                Bucket.setPosition(DUMP_IDLE);
                try {
                    Thread.sleep(325);
                } catch (InterruptedException e) { }
                armMotor.setTargetPosition(LIFT_LEVEL_ZERO);
                armMotor.setPower(ARM_SPEED);
                armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                liftState = LiftState.LIFT_RETRACT;
                break;
            case LIFT_RETRACT:
                if(Math.abs(armMotor.getCurrentPosition() - LIFT_LEVEL_ZERO) < 10)
                {
                    armMotor.setPower(0);
                    liftState = LiftState.LIFT_START;
                }
                break;
            default:
                liftState = LiftState.LIFT_START;
        }
        //safety button to reset the states
        if (gamepad2.x && liftState != LiftState.LIFT_START)
        {
            Bucket.setPosition(DUMP_IDLE);
            try {
                Thread.sleep(325);
            } catch (InterruptedException e) { }
            armMotor.setTargetPosition(LIFT_LEVEL_ZERO);
            armMotor.setPower(ARM_SPEED);
            armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            liftState = LiftState.LIFT_RETRACT;
        }

        //code for the mecanum wheels
        double y = -gamepad1.left_stick_y; // Remember, this is reversed!
        double x = gamepad1.left_stick_x * 1.1; // Counteract imperfect strafing
        double rx = gamepad1.right_stick_x;

        // Denominator is the largest motor power (absolute value) or 1
        // This ensures all the powers maintain the same ratio, but only when
        // at least one is out of the range [-1, 1]
        double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
        double frontLeftPower = (y + x + rx) / denominator;
        double backLeftPower = (y - x + rx) / denominator;
        double frontRightPower = (y - x - rx) / denominator;
        double backRightPower = (y + x - rx) / denominator;

        //divide by value greater than 1 to make it slower
        frontLeft.setPower(-frontLeftPower/1);
        backLeft.setPower(-backLeftPower/1);
        frontRight.setPower(-frontRightPower/1);
        backRight.setPower(-backRightPower/1);
    }
}
