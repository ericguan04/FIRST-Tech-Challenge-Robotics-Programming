package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.opencv.core.Scalar;
import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;
import org.openftc.easyopencv.OpenCvCameraRotation;

//@Config
@Autonomous(name="Blue Warehouse Side (Primary)", group="Tutorials")

public class Freight_Frenzy_Blue_Warehouse_Side_Autonomous extends LinearOpMode
{
    static final double     COUNTS_PER_MOTOR_REV        = 751.8 ;    // goBilda 5203 223rpm ticks per revolution
    static final double     DRIVE_GEAR_REDUCTION        = 1.0 ;      // This is < 1.0 if geared UP
    static final double     WHEEL_DIAMETER_INCHES       = 3.7795 ;   // For figuring circumference
    static final double     COUNTS_PER_INCH_WHEEL             = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);
    static final double     PULLY_HUB_DIAMETER_INCHES   = 1.375 ;  // For figuring circumference
    static final double     COUNTS_PER_INCH_ARM             = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (PULLY_HUB_DIAMETER_INCHES * 3.1415);
    static final double     DRIVE_SPEED                 = 0.5;
    static final double     ARM_SPEED                   = 0.9;
    static final double     FIRST_LEVEL_INCHES          = 4.2096;
    static final double     SECOND_LEVEL_INCHES         = 9.2341;
    static final double     THIRD_LEVEL_INCHES          = 15.2090;
    static final double     PAUSE                       = 0.0;

    private OpenCvCamera webcam;
    private ContourPipeline pipeline;

    private double crThreshHigh = 150;
    private double crThreshLow = 120;
    private double cbThreshHigh = 255;
    private double cbThreshLow = 255;

    private int minRectangleArea = 2000;
    private double leftBarcodeRangeBoundary = 0.3; //i.e 30% of the way across the frame from the left
    private double rightBarcodeRangeBoundary = 0.6; //i.e 60% of the way across the frame from the left

    private double lowerRuntime = 0;
    private double upperRuntime = 0;

    // Green Range                                      Y      Cr     Cb
    public static Scalar scalarLowerYCrCb = new Scalar(  0.0, 0.0, 0.0);
    public static Scalar scalarUpperYCrCb = new Scalar(255.0, 120.0, 120.0);

    @Override
    public void runOpMode() throws InterruptedException
    {
        // DECLARE MOTORS
        DcMotor frontLeft = hardwareMap.dcMotor.get("frontLeft");
        DcMotor backLeft = hardwareMap.dcMotor.get("backLeft");
        DcMotor frontRight = hardwareMap.dcMotor.get("frontRight");
        DcMotor backRight = hardwareMap.dcMotor.get("backRight");
        DcMotor armMotor = hardwareMap.dcMotor.get("armMotor");
        Servo Bucket = hardwareMap.servo.get("Bucket");

        frontLeft.setDirection(DcMotorSimple.Direction.REVERSE);
        backLeft.setDirection(DcMotorSimple.Direction.REVERSE);
        armMotor.setDirection(DcMotorSimple.Direction.REVERSE);

        armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        armMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        frontLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        frontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        backLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        frontRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        frontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        backRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        backRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        backRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        // OpenCV webcam
        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        webcam = OpenCvCameraFactory.getInstance().createWebcam(hardwareMap.get(WebcamName.class, "Webcam 1"), cameraMonitorViewId);
        //OpenCV Pipeline

        pipeline = new ContourPipeline(0.05, 0.05, 0.05, 0.05);

        pipeline.configureScalarLower(scalarLowerYCrCb.val[0],scalarLowerYCrCb.val[1],scalarLowerYCrCb.val[2]);
        pipeline.configureScalarUpper(scalarUpperYCrCb.val[0],scalarUpperYCrCb.val[1],scalarUpperYCrCb.val[2]);

        webcam.setPipeline(pipeline);

        // Webcam Streaming
        webcam.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener() {
            @Override
            public void onOpened() {
                webcam.startStreaming(1600, 896, OpenCvCameraRotation.UPRIGHT);
            }
            //use this to change the dimensions of the rectangle

            @Override
            public void onError(int errorCode) {

            }
        });

        // Only if you are using ftcdashboard
        //FtcDashboard dashboard = FtcDashboard.getInstance();
        //telemetry = dashboard.getTelemetry();
        //FtcDashboard.getInstance().startCameraStream(webcam, 10);

        waitForStart();

        if(isStopRequested()) return;

        while (opModeIsActive())
        {
            if(pipeline.error){
                telemetry.addData("Exception: ", pipeline.debug.getStackTrace());
            }
            // Only use this line of the code when you want to find the lower and upper values, using Ftc Dashboard (https://acmerobotics.github.io/ftc-dashboard/gettingstarted)
            // testing(pipeline);

            // Watch our YouTube Tutorial for the better explanation

            double rectangleArea = pipeline.getRectArea();

            //Print out the area of the rectangle that is found.
            telemetry.addData("Rectangle Area", rectangleArea);

            //Check to see if the rectangle has a large enough area to be a marker.
            //pause to wait for other team if needed
            sleep((long)PAUSE);
            if(rectangleArea > minRectangleArea){
                //Then check the location of the rectangle to see which barcode it is in.
                if(pipeline.getRectMidpointX() > rightBarcodeRangeBoundary * 1600)
                {
                    //level 3
                    telemetry.addData("Barcode Position", "Right");
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, 19, -19, -19, 19);
                    sleep(500);
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, 14, 14, 14, 14);
                    sleep(500);
                    armMovement(armMotor, ARM_SPEED, THIRD_LEVEL_INCHES);
                    sleep(500);
                    Bucket.setPosition(0.59);
                    sleep(500);
                    Bucket.setPosition(0.0);
                    sleep(750);
                    Bucket.setPosition(0.59);
                    sleep(500);
                    armMovement(armMotor, ARM_SPEED, 0);
                    sleep(500);

                    //park
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, 14,14,-14, -14);
                    sleep(500);
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, 17,-17,-17, 17);
                    sleep(500);
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, -37,-37,-37, -37);
                    sleep(500);
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, -20, 20, 20, -20);
                    sleep(500);
                    stop();
                }
                else if(pipeline.getRectMidpointX() < leftBarcodeRangeBoundary * 1600)
                {
                    //level 1
                    telemetry.addData("Barcode Position", "Left");
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, 19, -19, -19, 19);
                    sleep(500);
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, 14, 14, 14, 14);
                    sleep(500);
                    armMovement(armMotor, ARM_SPEED, FIRST_LEVEL_INCHES);
                    sleep(500);
                    Bucket.setPosition(0.59);
                    sleep(500);
                    Bucket.setPosition(0.0);
                    sleep(750);
                    Bucket.setPosition(0.59);
                    sleep(500);
                    armMovement(armMotor, ARM_SPEED, 0);
                    sleep(500);

                    //park
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, 14,14,-14, -14);
                    sleep(500);
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, 17,-17,-17, 17);
                    sleep(500);
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, -37,-37,-37, -37);
                    sleep(500);
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, -20, 20, 20, -20);
                    sleep(500);
                    stop();
                }
                else
                {
                    //level 2
                    telemetry.addData("Barcode Position", "Center");
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, 19, -19, -19, 19);
                    sleep(500);
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, 14, 14, 14, 14);
                    sleep(500);
                    armMovement(armMotor, ARM_SPEED, SECOND_LEVEL_INCHES);
                    sleep(500);
                    Bucket.setPosition(0.59);
                    sleep(500);
                    Bucket.setPosition(0.0);
                    sleep(750);
                    Bucket.setPosition(0.59);
                    sleep(500);
                    armMovement(armMotor, ARM_SPEED, 0);
                    sleep(500);

                    //park
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, 14,14,-14, -14);
                    sleep(500);
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, 17,-17,-17, 17);
                    sleep(500);
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, -37,-37,-37, -37);
                    sleep(500);
                    encoderDrive(frontLeft, backLeft, frontRight, backRight, DRIVE_SPEED, -20, 20, 20, -20);
                    sleep(500);
                    stop();
                }
            }

            telemetry.update();
        }
    }
    
    //METHOD THAT CONTROLS THE DRIVETRAIN
    public void encoderDrive(DcMotor frontLeft, DcMotor backLeft, DcMotor frontRight, DcMotor backRight, double speed, double frontLeftInches, double backLeftInches, double frontRightInches, double backRightInches)
    {
        int newFrontLeftTarget;
        int newBackLeftTarget;
        int newFrontRightTarget;
        int newBackRightTarget;

        if (opModeIsActive())
        {
            newFrontLeftTarget = frontLeft.getCurrentPosition() + (int)(frontLeftInches * COUNTS_PER_INCH_WHEEL);
            newBackLeftTarget = backLeft.getCurrentPosition() + (int)(backLeftInches * COUNTS_PER_INCH_WHEEL);
            newFrontRightTarget = frontRight.getCurrentPosition() + (int)(frontRightInches * COUNTS_PER_INCH_WHEEL);
            newBackRightTarget = backRight.getCurrentPosition() + (int)(backRightInches * COUNTS_PER_INCH_WHEEL);

            frontLeft.setTargetPosition(newFrontLeftTarget);
            backLeft.setTargetPosition(newBackLeftTarget);
            frontRight.setTargetPosition(newFrontRightTarget);
            backRight.setTargetPosition(newBackRightTarget);

            frontLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            backLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            frontRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            backRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            frontLeft.setPower(speed);
            backLeft.setPower(speed);
            frontRight.setPower(speed);
            backRight.setPower(speed);

            while (opModeIsActive() && ( frontLeft.isBusy() && backLeft.isBusy() && frontRight.isBusy() && backRight.isBusy() ) )
            {
                telemetry.addData("Status", "Running the Autonomous Mode");
                telemetry.update();
            }

            frontLeft.setPower(0);
            backLeft.setPower(0);
            frontRight.setPower(0);
            backRight.setPower(0);

            frontLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            backLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            frontRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            backRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        }
    }

    //METHOD THAT CONTROLS THE ARM
    public void armMovement (DcMotor armMotor, double armSpeed, double armInches)
    {
        armMotor.setTargetPosition( (int) (armInches * COUNTS_PER_INCH_ARM) );
        armMotor.setPower(armSpeed);
        armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        while (opModeIsActive() && ( armMotor.isBusy() ) )
        {
            telemetry.addData("Status", "Running the Arm Code");
            telemetry.update();
        }

        armMotor.setPower(0);
    }
}
