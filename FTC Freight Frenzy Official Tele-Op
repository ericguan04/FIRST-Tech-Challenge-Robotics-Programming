package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;

@TeleOp(name="Freight Frenzy Official TeleOp")
public class Freight_Frenzy_Official_TeleOp extends OpMode
{
    //for toggling
    boolean onOff = false;

    //arm encoder calculations
    static final double     COUNTS_PER_MOTOR_REV        = 751.8 ;    // goBilda 5203 223rpm ticks per revolution
    static final double     DRIVE_GEAR_REDUCTION        = 1.0 ;      // This is < 1.0 if geared UP
    static final double     PULLY_HUB_DIAMETER_INCHES   = 1.375 ;  // For figuring circumference
    static final double     COUNTS_PER_INCH             = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (PULLY_HUB_DIAMETER_INCHES * 3.1415);
    static final double     ARM_SPEED                   = 0.9;
    static final double     FIRST_LEVEL_INCHES          = 4.2096;
    static final double     SECOND_LEVEL_INCHES         = 9.2341;
    static final double     THIRD_LEVEL_INCHES          = 15.2090;

    public enum LiftState
    {
        LIFT_START,
        LIFT_DUMP,
        LIFT_DUMP_RETRACT,
        LIFT_RETRACT,
        LIFT_EXTEND_ONE,
        LIFT_EXTEND_TWO,
        LIFT_EXTEND_THREE
    }

    LiftState liftState = LiftState.LIFT_START;

    //arm motor
    public DcMotor armMotor;

    //mecanum wheels
    public DcMotor frontLeft;
    public DcMotor backLeft;
    public DcMotor frontRight;
    public DcMotor backRight;

    //other mechanisms
    public DcMotor intake;
    public DcMotor Carousel;

    //dump servo
    public Servo Bucket;

    final double DUMP_IDLE = 0.605;
    final double DUMP_DEPOSIT = 0.0;
    final int LIFT_LEVEL_ZERO = 10;
    final int LIFT_LEVEL_ONE = (int) (FIRST_LEVEL_INCHES * COUNTS_PER_INCH);
    final int LIFT_LEVEL_TWO = (int) (SECOND_LEVEL_INCHES * COUNTS_PER_INCH);
    final int LIFT_LEVEL_THREE = (int) (THIRD_LEVEL_INCHES * COUNTS_PER_INCH);

    public void init()
    {
        frontLeft = hardwareMap.dcMotor.get("frontLeft");
        backLeft = hardwareMap.dcMotor.get("backLeft");
        frontRight = hardwareMap.dcMotor.get("frontRight");
        backRight = hardwareMap.dcMotor.get("backRight");
        armMotor = hardwareMap.dcMotor.get("armMotor");
        Bucket = hardwareMap.servo.get("Bucket");
        intake = hardwareMap.dcMotor.get("intake");
        Carousel = hardwareMap.dcMotor.get("Carousel");

        frontRight.setDirection(DcMotorSimple.Direction.REVERSE);
        backRight.setDirection(DcMotorSimple.Direction.REVERSE);
        armMotor.setDirection(DcMotorSimple.Direction.REVERSE);

        armMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        armMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        armMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        //added this to set up servo during init
        Bucket.setPosition(DUMP_IDLE);

        //testing: adding brake behavior to tele-op drive train
        frontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
    }

    public void loop()
    {
        switch (liftState)
        {
            case LIFT_START:
                if(gamepad2.a)
                {
                    armMotor.setTargetPosition(LIFT_LEVEL_ONE);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_ONE;
                }

                if(gamepad2.b)
                {
                    armMotor.setTargetPosition(LIFT_LEVEL_TWO);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_TWO;
                }

                if(gamepad2.y)
                {
                    armMotor.setTargetPosition(LIFT_LEVEL_THREE);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_THREE;
                }
                break;
            case LIFT_EXTEND_ONE:
                if(Math.abs(armMotor.getCurrentPosition() - LIFT_LEVEL_ONE) < 10)
                {
                    armMotor.setPower(0);
                    liftState = LiftState.LIFT_DUMP;
                }
                break;
            case LIFT_EXTEND_TWO:
                if(Math.abs(armMotor.getCurrentPosition() - LIFT_LEVEL_TWO) < 10)
                {
                    armMotor.setPower(0);
                    liftState = LiftState.LIFT_DUMP;
                }
                break;
            case LIFT_EXTEND_THREE:
                if(Math.abs(armMotor.getCurrentPosition() - LIFT_LEVEL_THREE) < 10)
                {
                    armMotor.setPower(0);
                    liftState = LiftState.LIFT_DUMP;
                }
                break;
            case LIFT_DUMP:
                if(gamepad1.y)
                {
                    Bucket.setPosition(DUMP_DEPOSIT);
                    try {
                        Thread.sleep(600);
                    } catch (InterruptedException e) { }
                    liftState = LiftState.LIFT_DUMP_RETRACT;
                }

                if(gamepad2.a)
                {
                    armMotor.setTargetPosition(LIFT_LEVEL_ONE);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_ONE;
                }

                if(gamepad2.b)
                {
                    armMotor.setTargetPosition(LIFT_LEVEL_TWO);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_TWO;
                }

                if(gamepad2.y)
                {
                    armMotor.setTargetPosition(LIFT_LEVEL_THREE);
                    armMotor.setPower(ARM_SPEED);
                    armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                    liftState = LiftState.LIFT_EXTEND_THREE;
                }
                break;
            case LIFT_DUMP_RETRACT:
                Bucket.setPosition(DUMP_IDLE);
                try {
                    Thread.sleep(325);
                } catch (InterruptedException e) { }
                armMotor.setTargetPosition(LIFT_LEVEL_ZERO);
                armMotor.setPower(ARM_SPEED);
                armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
                liftState = LiftState.LIFT_RETRACT;
                break;
            case LIFT_RETRACT:
                if(Math.abs(armMotor.getCurrentPosition() - LIFT_LEVEL_ZERO) < 10)
                {
                    armMotor.setPower(0);
                    liftState = LiftState.LIFT_START;
                }
                break;
            default:
                liftState = LiftState.LIFT_START;
        }
        //safety button to reset the states
        if (gamepad2.x && liftState != LiftState.LIFT_START)
        {
            Bucket.setPosition(DUMP_IDLE);
            try {
                Thread.sleep(325);
            } catch (InterruptedException e) { }
            armMotor.setTargetPosition(LIFT_LEVEL_ZERO);
            armMotor.setPower(ARM_SPEED);
            armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            liftState = LiftState.LIFT_RETRACT;
        }

        //code for the mecanum wheels
        double y = -gamepad1.left_stick_y;
        double x = gamepad1.left_stick_x * 1.1;
        double rx = gamepad1.right_stick_x;

        double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
        double frontLeftPower = (y + x + rx) / denominator;
        double backLeftPower = (y - x + rx) / denominator;
        double frontRightPower = (y - x - rx) / denominator;
        double backRightPower = (y + x - rx) / denominator;

        //divide by value greater than 1 to make it slower
        frontLeft.setPower(-frontLeftPower/1.5);
        backLeft.setPower(-backLeftPower/1.5);
        frontRight.setPower(-frontRightPower/1.5);
        backRight.setPower(-backRightPower/1.5);

        //code to toggle the intake using the A button
        //uses the boolean "onOff" to remember if the button has been pressed before or not. The sleep command allows the code to temporarily stop in order to allow the onOff variable to switch. It gives us a 0.2 second window to press the button.
        //this code allows the variable to switch when the button is pressed.
        if (gamepad1.a && !onOff)
        {
            onOff = true;
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) { }
        }
        else if (gamepad1.a && onOff)
        {
            onOff = false;
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) { }
        }

        if(onOff)
        {
            intake.setPower(-1);
        }
        else if(!onOff)
        {
            intake.setPower(0.0);
        }

        if(gamepad1.b)
        {
            intake.setPower(1);
        }
        else
        {
            intake.setPower(0.0);
        }

        //carousel code
        //hold the bumpers to run the carousel code in either direction
        if(gamepad2.left_bumper)
        {
            Carousel.setPower(1);
        }
        else
        {
            Carousel.setPower(0);
        }

        if(gamepad2.right_bumper)
        {
            Carousel.setPower(-1);
        }
        else
        {
            Carousel.setPower(0);
        }
    }
}
